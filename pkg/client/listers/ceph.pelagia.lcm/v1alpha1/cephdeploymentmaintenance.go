/*
Copyright 2025 Mirantis IT.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Mirantis/pelagia/pkg/apis/ceph.pelagia.lcm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CephDeploymentMaintenanceLister helps list CephDeploymentMaintenances.
// All objects returned here must be treated as read-only.
type CephDeploymentMaintenanceLister interface {
	// List lists all CephDeploymentMaintenances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentMaintenance, err error)
	// CephDeploymentMaintenances returns an object that can list and get CephDeploymentMaintenances.
	CephDeploymentMaintenances(namespace string) CephDeploymentMaintenanceNamespaceLister
	CephDeploymentMaintenanceListerExpansion
}

// cephDeploymentMaintenanceLister implements the CephDeploymentMaintenanceLister interface.
type cephDeploymentMaintenanceLister struct {
	indexer cache.Indexer
}

// NewCephDeploymentMaintenanceLister returns a new CephDeploymentMaintenanceLister.
func NewCephDeploymentMaintenanceLister(indexer cache.Indexer) CephDeploymentMaintenanceLister {
	return &cephDeploymentMaintenanceLister{indexer: indexer}
}

// List lists all CephDeploymentMaintenances in the indexer.
func (s *cephDeploymentMaintenanceLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentMaintenance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentMaintenance))
	})
	return ret, err
}

// CephDeploymentMaintenances returns an object that can list and get CephDeploymentMaintenances.
func (s *cephDeploymentMaintenanceLister) CephDeploymentMaintenances(namespace string) CephDeploymentMaintenanceNamespaceLister {
	return cephDeploymentMaintenanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CephDeploymentMaintenanceNamespaceLister helps list and get CephDeploymentMaintenances.
// All objects returned here must be treated as read-only.
type CephDeploymentMaintenanceNamespaceLister interface {
	// List lists all CephDeploymentMaintenances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentMaintenance, err error)
	// Get retrieves the CephDeploymentMaintenance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CephDeploymentMaintenance, error)
	CephDeploymentMaintenanceNamespaceListerExpansion
}

// cephDeploymentMaintenanceNamespaceLister implements the CephDeploymentMaintenanceNamespaceLister
// interface.
type cephDeploymentMaintenanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CephDeploymentMaintenances in the indexer for a given namespace.
func (s cephDeploymentMaintenanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentMaintenance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentMaintenance))
	})
	return ret, err
}

// Get retrieves the CephDeploymentMaintenance from the indexer for a given namespace and name.
func (s cephDeploymentMaintenanceNamespaceLister) Get(name string) (*v1alpha1.CephDeploymentMaintenance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cephdeploymentmaintenance"), name)
	}
	return obj.(*v1alpha1.CephDeploymentMaintenance), nil
}
