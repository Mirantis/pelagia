/*
Copyright 2025 Mirantis IT.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Mirantis/pelagia/pkg/apis/ceph.pelagia.lcm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CephDeploymentHealthLister helps list CephDeploymentHealths.
// All objects returned here must be treated as read-only.
type CephDeploymentHealthLister interface {
	// List lists all CephDeploymentHealths in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentHealth, err error)
	// CephDeploymentHealths returns an object that can list and get CephDeploymentHealths.
	CephDeploymentHealths(namespace string) CephDeploymentHealthNamespaceLister
	CephDeploymentHealthListerExpansion
}

// cephDeploymentHealthLister implements the CephDeploymentHealthLister interface.
type cephDeploymentHealthLister struct {
	indexer cache.Indexer
}

// NewCephDeploymentHealthLister returns a new CephDeploymentHealthLister.
func NewCephDeploymentHealthLister(indexer cache.Indexer) CephDeploymentHealthLister {
	return &cephDeploymentHealthLister{indexer: indexer}
}

// List lists all CephDeploymentHealths in the indexer.
func (s *cephDeploymentHealthLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentHealth, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentHealth))
	})
	return ret, err
}

// CephDeploymentHealths returns an object that can list and get CephDeploymentHealths.
func (s *cephDeploymentHealthLister) CephDeploymentHealths(namespace string) CephDeploymentHealthNamespaceLister {
	return cephDeploymentHealthNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CephDeploymentHealthNamespaceLister helps list and get CephDeploymentHealths.
// All objects returned here must be treated as read-only.
type CephDeploymentHealthNamespaceLister interface {
	// List lists all CephDeploymentHealths in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentHealth, err error)
	// Get retrieves the CephDeploymentHealth from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CephDeploymentHealth, error)
	CephDeploymentHealthNamespaceListerExpansion
}

// cephDeploymentHealthNamespaceLister implements the CephDeploymentHealthNamespaceLister
// interface.
type cephDeploymentHealthNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CephDeploymentHealths in the indexer for a given namespace.
func (s cephDeploymentHealthNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentHealth, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentHealth))
	})
	return ret, err
}

// Get retrieves the CephDeploymentHealth from the indexer for a given namespace and name.
func (s cephDeploymentHealthNamespaceLister) Get(name string) (*v1alpha1.CephDeploymentHealth, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cephdeploymenthealth"), name)
	}
	return obj.(*v1alpha1.CephDeploymentHealth), nil
}
