/*
Copyright 2025 Mirantis IT.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Mirantis/pelagia/pkg/apis/ceph.pelagia.lcm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CephDeploymentSecretLister helps list CephDeploymentSecrets.
// All objects returned here must be treated as read-only.
type CephDeploymentSecretLister interface {
	// List lists all CephDeploymentSecrets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentSecret, err error)
	// CephDeploymentSecrets returns an object that can list and get CephDeploymentSecrets.
	CephDeploymentSecrets(namespace string) CephDeploymentSecretNamespaceLister
	CephDeploymentSecretListerExpansion
}

// cephDeploymentSecretLister implements the CephDeploymentSecretLister interface.
type cephDeploymentSecretLister struct {
	indexer cache.Indexer
}

// NewCephDeploymentSecretLister returns a new CephDeploymentSecretLister.
func NewCephDeploymentSecretLister(indexer cache.Indexer) CephDeploymentSecretLister {
	return &cephDeploymentSecretLister{indexer: indexer}
}

// List lists all CephDeploymentSecrets in the indexer.
func (s *cephDeploymentSecretLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentSecret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentSecret))
	})
	return ret, err
}

// CephDeploymentSecrets returns an object that can list and get CephDeploymentSecrets.
func (s *cephDeploymentSecretLister) CephDeploymentSecrets(namespace string) CephDeploymentSecretNamespaceLister {
	return cephDeploymentSecretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CephDeploymentSecretNamespaceLister helps list and get CephDeploymentSecrets.
// All objects returned here must be treated as read-only.
type CephDeploymentSecretNamespaceLister interface {
	// List lists all CephDeploymentSecrets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentSecret, err error)
	// Get retrieves the CephDeploymentSecret from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CephDeploymentSecret, error)
	CephDeploymentSecretNamespaceListerExpansion
}

// cephDeploymentSecretNamespaceLister implements the CephDeploymentSecretNamespaceLister
// interface.
type cephDeploymentSecretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CephDeploymentSecrets in the indexer for a given namespace.
func (s cephDeploymentSecretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CephDeploymentSecret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CephDeploymentSecret))
	})
	return ret, err
}

// Get retrieves the CephDeploymentSecret from the indexer for a given namespace and name.
func (s cephDeploymentSecretNamespaceLister) Get(name string) (*v1alpha1.CephDeploymentSecret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cephdeploymentsecret"), name)
	}
	return obj.(*v1alpha1.CephDeploymentSecret), nil
}
